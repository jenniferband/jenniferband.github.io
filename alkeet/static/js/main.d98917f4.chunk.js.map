{"version":3,"sources":["components/OPerson.js","components/Countries.js","components/countries_data.js","components/students_data.js","components/Skills.js","components/Links.js","App.js","serviceWorker.js","index.js"],"names":["OPerson","student","className","name","age","email","src","url","alt","OPersons","students","map","key","id","Country","country","useState","show","setShow","onClick","e","capital","population","flag","Countries","countries","student1","Skill","skill","Skills","skills","setSkills","newSkill","setNewSkill","onSubmit","preventDefault","tempSkills","concat","value","onChange","target","console","log","type","i","Link","link","addLike","description","href","likes","Links","links","setLinks","tempLinks","total","length","reduce","a","b","totalLikes","LinkForm","newLink","setNewLink","changeHandler","field","tempLink","uniqueId","Math","round","random","basicskills","App","counter","setCounter","alert","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d98917f4.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css';\r\n\r\n// ottaa props:ina OLION \r\nconst OPerson = ({student}) => {\r\n    return (\r\n        <div className=\"studentinfo\">\r\n            <p>Name: {student.name}</p>\r\n            <p>Age: {student.age}</p>\r\n            <p>Email: {student.email}</p>\r\n            <img src={student.url} alt=\"face\" />\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n// ottaa props:ina TAULUKON olioita\r\nconst OPersons = ({students}) => {\r\n    return (\r\n        <div>\r\n        <div className=\"mainpart\">\r\n            \r\n            {students.map(student => <OPerson student={student} key={student.id}/>)}\r\n        </div>\r\n        </div>\r\n    )\r\n} \r\n\r\nexport {OPersons, OPerson};","import React, {useState} from 'react';\r\nimport '../App.css';\r\n\r\n// ottaa props:ina OLION \r\nconst Country = ({country}) => {\r\n    const [show, setShow] = useState(false);\r\n    return (\r\n        <div className=\"countryinfo\">\r\n            <h2 onClick={e => setShow(!show)}>{country.name}</h2>\r\n            {show &&\r\n                <div>\r\n                    <p>Pääkaupunki: {country.capital}</p>\r\n                    <p>Asukasmäärä: {country.population}</p>\r\n                    <img src={country.flag} alt=\"face\" />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n// ottaa props:ina TAULUKON olioita\r\nconst Countries = ({countries}) => {\r\n    return (\r\n        <div className=\"mainpartcountries\">\r\n            {countries.map(country => <Country country={country} key={country.id}/>)}\r\n        </div>\r\n    )\r\n} \r\n\r\nexport default Countries;","let countries = [\r\n    \r\n    {   id: 1,\r\n        name:\"Finland\",\r\n        capital:\"Helsinki\",\r\n        population:5491817,\r\n        flag:\"https://restcountries.eu/data/fin.svg\"\r\n    },\r\n    {   id:2,\r\n        name:\"Sweden\",\r\n        capital:\"Stockholm\",\r\n        population:9894888,\r\n        flag:\"https://restcountries.eu/data/swe.svg\"\r\n    },\r\n    {   id:3,\r\n        name:\"Norway\",\r\n        capital:\"Oslo\",\r\n        population:5223256,\r\n        flag:\"https://restcountries.eu/data/nor.svg\"\r\n    },\r\n    {   id:4,\r\n        name:\"Denmark\",\r\n        capital:\"Copenhagen\",\r\n        population:5717014,\r\n        flag:\"https://restcountries.eu/data/dnk.svg\"\r\n    },\r\n    {   id:5,\r\n        name:\"Iceland\",\r\n        capital:\"Reykjavík\",\r\n        population:334300,\r\n        flag:\"https://restcountries.eu/data/isl.svg\"\r\n    }];\r\n\r\nexport default countries;","let student1 = {\r\n    id: 1,\r\n    name: \"Susanna Jaakkola\",\r\n    age: 24,\r\n    email: \"susannajaa@gmail.com\",\r\n    url: \"https://style.anu.edu.au/_anu/4/images/placeholders/person.png\"\r\n  };\r\n\r\n  let student2 = {\r\n    id: 2,\r\n    name: \"Mikko Mallikas\",\r\n    age: 22,\r\n    email: \"mikkomal@gmail.com\",\r\n    url: \"https://style.anu.edu.au/_anu/4/images/placeholders/person.png\"\r\n  };\r\n\r\n  let student3 = {\r\n    id: 3,\r\n    name: \"Jesse Järvinen\",\r\n    age: 22,\r\n    email: \"jessejar@gmail.com\",\r\n    url: \"https://style.anu.edu.au/_anu/4/images/placeholders/person.png\"\r\n  };\r\n\r\n  let students = [student1, student2, student3];\r\n\r\n  export {student1, students};","import React, {useState} from 'react'; \r\n\r\nconst Skill = ({skill}) => {\r\n    return (\r\n        <div className=\"skill\">\r\n            {skill}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Skills = ({skills, setSkills}) => {\r\n    const [newSkill, setNewSkill] = useState(\"\");\r\n\r\n    const changeHandler = (e) => {\r\n        setNewSkill(e.target.value);\r\n        console.log(newSkill);\r\n    }\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();  //estetään lomakkeen lähetys palvelimelle\r\n        let tempSkills = skills.concat(newSkill);\r\n        setSkills(tempSkills);\r\n    }\r\n\r\n    return (\r\n        <div className=\"skillspart\">\r\n            <form onSubmit={submitHandler}>\r\n                <input  value={newSkill}\r\n                        onChange={changeHandler}\r\n                        type=\"text\" \r\n                        id=\"skill\" \r\n                        name=\"newskill\"  />\r\n            </form>\r\n            {skills.map((skill, i) => <Skill key={i} skill={skill} />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Skills;\r\n","import React, {useState} from 'react'; \r\n\r\nconst Link = ({link, addLike}) => {\r\n\r\n    return (\r\n        <div className=\"linkinfo\">\r\n            <p>Linkinfo: {link.description}</p>\r\n            <p>Id: {link.id}</p>\r\n            <a href={link.url} >Tässä mennään</a>\r\n            <p>Tykkäykset: {link.likes}</p>\r\n            <button onClick={e => addLike(link.id)}>Tykkää tästä!</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Links = ({links, setLinks}) => {\r\n    const addLike = (id) => {\r\n        const tempLinks = links.map(link => {\r\n            if(link.id === id){\r\n                const tempLink = {...link, likes: (link.likes + 1)};\r\n                return tempLink;\r\n            } else {\r\n                return link;\r\n            }\r\n        })\r\n        setLinks(tempLinks);\r\n    }\r\n\r\n    const totalLikes = () => {\r\n        let total = 0;\r\n        if(links.length !== 0){\r\n            const likesArray = links.map(link => link.likes);  \r\n            total = likesArray.reduce((a, b) => a + b, 0);\r\n        }\r\n        return total;\r\n    }\r\n\r\n    return(<div className=\"mainpart\">\r\n                {links.map(link => \r\n                <Link key={link.id} \r\n                      link={link} \r\n                      addLike={addLike} />)}\r\n                <p>Kaikki tykkäykset: {totalLikes()}</p>\r\n           </div>\r\n    )\r\n}\r\n\r\nconst LinkForm = ({links, setLinks}) => {\r\n    const [newLink, setNewLink] = useState({description: \"\", url: \"\", likes: 0});\r\n\r\n    const changeHandler = (e, field) => {\r\n        const tempLink = {...newLink}; //spread-operaattori, kopioi olion sisällön\r\n        tempLink[field] = e.target.value; \r\n        setNewLink(tempLink);\r\n    }\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        // testaa että kentät eivät ole tyhjiä!!!\r\n        if(newLink.description !== \"\" && newLink.url !== \"\"){\r\n            const uniqueId = Math.round(Math.random(10000000000000000)*10000000000000000);\r\n            setLinks(links.concat({...newLink, id: uniqueId}));  //olio lisätään taulukkoon \"links\"\r\n            setNewLink({description: \"\", url: \"\", likes: 0});\r\n        } else {\r\n            console.log(\"anna tiedot\");\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className=\"linkform\">\r\n            <form onSubmit={submitHandler}>\r\n                Kuvaus: <input onChange={e => changeHandler(e, \"description\")} \r\n                               value={newLink.description} \r\n                               type=\"text\"/><br />\r\n                Url: <input onChange={e => changeHandler(e, \"url\")} \r\n                            value={newLink.url} type=\"text\"/> <br />\r\n                Tykkäykset: {newLink.likes} <br />\r\n                <input type=\"submit\" />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {LinkForm, Links};","import React, {useState} from 'react'; \r\n\r\nimport './App.css';\r\nimport Person from './components/Person';\r\nimport {OPerson, OPersons} from './components/OPerson';\r\nimport Countries from './components/Countries';\r\n\r\nimport countries from './components/countries_data';\r\nimport {students, student1} from './components/students_data';\r\n\r\nimport Skills from './components/Skills'; \r\nimport {Links, LinkForm} from './components/Links';\r\n\r\nlet basicskills = [\"HTML ja CSS\", \"PHP ja JS\"];\r\nconst App = () => {\r\n  \r\n  const [counter, setCounter] = useState(0); \r\n  const [show, setShow] = useState(false); \r\n\r\n  const [skills, setSkills] = useState(basicskills); \r\n  const [links, setLinks] = useState([]); //TÄMÄ\r\n  \r\n  const addOne = () => {\r\n    console.log(\"nappia painettu\");\r\n    setCounter(counter + 1);\r\n    console.log(counter);\r\n  }\r\n\r\n  console.log(links);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n      <h1 onClick={e => alert(\"Heippa, eventti toimii ok!\")}>React demot</h1>\r\n      </header>    \r\n      \r\n      <button onClick={e => alert(\"Heippa, eventti toimii ok!\")}>Testinappi</button>\r\n      <button onClick={addOne}>Plussanappi: {counter} </button>\r\n      <button onClick={e => setShow(!show)}>{show ? \"Piilota\" : \"Näytä\"}</button>\r\n\r\n    { show &&\r\n    <div>\r\n            <section className=\"mainpart\">\r\n        <OPerson student={student1}/>\r\n      </section>\r\n      <section className=\"mainpart\">\r\n        \r\n        <OPersons students={students}/>\r\n      </section>\r\n    <section className=\"mainpart\">\r\n        <Countries countries={countries} />\r\n    </section>\r\n    </div>\r\n     }\r\n    <section className=\"skills\">\r\n        <Skills skills={skills} setSkills={setSkills}/>\r\n    </section>\r\n\r\n     <section>\r\n        <LinkForm links={links} setLinks={setLinks}/>\r\n        <Links links={links} setLinks={setLinks}/>\r\n        \r\n     </section>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}